Author: John Jacobsen, NPX Designs, Inc. john@mail.npxdesigns.com

This project consists of the very first steps of an implementation of
the Clojure language to Python.  At the moment it is interpreted and
does very little (see file test_lisp.py for examples).  I probably
shouldn't even call it PyClojure at this point, but the name at least
serves to indicate my intentions....

DEPENDENCIES

- PLY [1] (for lexing and parsing)
- Nose [2] (to run unit tests)
- Python 2.6+

WHY DO THIS?

The long JVM startup time makes use of Clojure for scripting common
system tasks somewhat unworkable, or at least irritating.  NewLISP[3]
would be an option, but this implementation is meant to maintain
syntax-compatibility with Clojure (as implemented on the JVM).  The
goal is to provide a real Lisp with macros, and Clojure's syntactic
goodness, as well as immutable data structures, which can coexist with
Python and make use of its extensive, 'batteries included' libraries.

Feel free to join in!

NEXT STEPS

- Maps
- Sets
- Lambda / fn / (# ...)
- Python interop
- Macros
- Quote (do w/ macro...?)
- loop/recur
- Defn
- Namespaces
- Real immutable, persistent data structures (currently Python lists are used)
- setup.py packaging
- ...

DONE

- Parsing and storage of trees of lists, vectors, atoms, integers,
  and integers
- 'def' and simple evaluation
- A few builtin functions


[1] http://www.dabeaz.com/ply/.  It turns out Python is actually quite serviceable
    for writing compilers, particularly for prototyping, and I'm curious how far
    one can push this.
[2] http://readthedocs.org/docs/nose/en/latest/
[3] http://www.newlisp.org/
